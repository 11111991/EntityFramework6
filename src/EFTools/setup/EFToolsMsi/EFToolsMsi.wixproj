<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), BuildEFTools.cmd))\tools\EntityFramework.settings.targets" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">x86</Platform>
    <ProductVersion>3.7</ProductVersion>
    <ProjectGuid>69ba80f1-e0eb-4109-a91a-6059f2954b2d</ProjectGuid>
    <SchemaVersion>2.0</SchemaVersion>
    <OutputName>EFTools</OutputName>
    <OutputType>Package</OutputType>
    <Name>EFToolsMsi</Name>
    <SolutionDir Condition="$(SolutionDir) == ''">..\..\..\..\</SolutionDir>
    <RestorePackages>true</RestorePackages>
    <EmbedCab Condition="$(EmbedCab) == ''">no</EmbedCab>
    <IncludeLocalizedArtifacts Condition="$(IncludeLocalizedArtifacts) == ''">false</IncludeLocalizedArtifacts>
    <SetMsiAssemblyNameFileVersion>true</SetMsiAssemblyNameFileVersion>
    <DefineSolutionProperties Label="turn off warning about making VS IDE properties available when building from command window.">false</DefineSolutionProperties>
    <!-- Need to allow maximum version to be the same to allow developers to replace the same version during development -->
    <SuppressIces>ICE61</SuppressIces>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
    <DefineConstants>$(DefineConstants);Debug</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="Core.wxs" />
    <Compile Include="DatabaseGeneration.wxs" />
    <Compile Include="Folders.wxs" />
    <Compile Include="EFToolsMsi.wxs" />
    <Compile Include="ItemTemplates.wxs" />
    <Compile Include="Licenses.wxs" />
    <Compile Include="NuGetPackages.wxs" />
    <Compile Include="XmlSchemas.wxs" />
    <Compile Include="SatelliteAssemblies.wxs" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="Defines.wxi" />
    <Content Include="packages.config" />
    <Content Include="Resources\EFToolsStrings.wxl.tokenized" />
    <Content Include="Resources\FirstPage.bmp" />
    <Content Include="Resources\Header.bmp" />
    <Content Include="Resources\License.rtf" />
    <Content Include="Resources\Setup.ico" />
    <Content Include="XmlSchemas\EntityFrameworkCatalog.xml" />
    <Content Include="XmlSchemas\EntityFrameworkConfig_6_1_0.xsd" />
    <Content Include="XmlSchemas\System.Data.Resources.AnnotationSchema.xsd" />
    <Content Include="XmlSchemas\System.Data.Resources.CodeGenerationSchema.xsd" />
    <Content Include="XmlSchemas\System.Data.Resources.CSDLSchema_1.xsd" />
    <Content Include="XmlSchemas\System.Data.Resources.CSDLSchema_1_1.xsd" />
    <Content Include="XmlSchemas\System.Data.Resources.CSDLSchema_2.xsd" />
    <Content Include="XmlSchemas\System.Data.Resources.CSDLSchema_3.xsd" />
    <Content Include="XmlSchemas\System.Data.Resources.CSMSL_1.xsd" />
    <Content Include="XmlSchemas\System.Data.Resources.CSMSL_2.xsd" />
    <Content Include="XmlSchemas\System.Data.Resources.CSMSL_3.xsd" />
    <Content Include="XmlSchemas\system.data.resources.entitystoreschemagenerator.xsd" />
    <Content Include="XmlSchemas\System.Data.Resources.ProviderServices.ProviderManifest.xsd" />
    <Content Include="XmlSchemas\System.Data.Resources.SSDLSchema.xsd" />
    <Content Include="XmlSchemas\System.Data.Resources.SSDLSchema_2.xsd" />
    <Content Include="XmlSchemas\System.Data.Resources.SSDLSchema_3.xsd" />
  </ItemGroup>
  <ItemGroup>
    <WixExtension Include="WixUIExtension">
      <HintPath>$(WixExtDir)\WixUIExtension.dll</HintPath>
      <Name>WixUIExtension</Name>
    </WixExtension>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="Resources\EFToolsStrings.wxl" />
    <EmbeddedResource Include="Resources\WixUI.wxl" />
  </ItemGroup>
  <ItemGroup>
    <Folder Include="Resources" />
    <Folder Include="XmlSchemas\" />
  </ItemGroup>
  <Target Name="Build">
    <!-- Build target from WiX would have overwritten this target if wix had been installed -->
    <Error Text="Wix Toolset not installed" />
  </Target>
  <Target Name="Clean">
    <!-- Clean target from WiX would have overwritten this target if wix had been installed -->
    <Error Text="Wix Toolset not installed" />
  </Target>
  <Target Name="Rebuild" DependsOnTargets="Build">
  </Target>
  <Import Project="$(MSBuildExtensionsPath)\Microsoft\WiX\v3.x\Wix.targets"
          Condition="Exists('$(MSBuildExtensionsPath)\Microsoft\WiX\v3.x')" />

  <PropertyGroup>
    <PackagesInputDir Condition=" '$(PackagesInputDir)' == ''">$(NuGetOutputPath)</PackagesInputDir>

    <!-- override output dir for EF5 package restore (which will automatically append \packages to path) -->
    <PackageRestoreOutputDir>$(PackagesInputDir)</PackageRestoreOutputDir>

    <!-- Now align PackagesDir with PackagesInputDir so that the local framework and the EF5 framework end up in the same directory -->
    <PackagesDir>$(PackagesInputDir)\packages</PackagesDir>
    
    <!-- Allow the source of local packages to be overridden for a frozen runtime
         If running locally $(build_branch_name) will not be set - so override if only $(FrozenRuntimeDir) is set.
         But if $(build_branch_name) is set (CI builds) require that $(FrozenRuntimeBranch) exists and is equal to $(build_branch_name). -->
    <ShouldUseFrozenRuntime Condition="'$(FrozenRuntimeDir)' != '' AND ('$(build_branch_name)' == '' OR '$(build_branch_name)' == '$(FrozenRuntimeBranch)')">True</ShouldUseFrozenRuntime>
    <ShouldUseFrozenRuntime Condition="'$(ShouldUseFrozenRuntime)' == ''">False</ShouldUseFrozenRuntime>
    <LocalPackageSourceDir Condition="'$(ShouldUseFrozenRuntime)' == 'True'">$(FrozenRuntimeDir)</LocalPackageSourceDir>
    <LocalPackageSourceDir Condition="'$(LocalPackageSourceDir)' == ''">$(PackagesInputDir)</LocalPackageSourceDir>

    <BuildDependsOn>RestorePackages;RestoreLocalPackages;ExtractNuspecs;ReplaceEFToolsStrings;$(BuildDependsOn)</BuildDependsOn>
  </PropertyGroup>

  <Import Project="$(SolutionDir)\.nuget\nuget.targets" />

  <Target Name="ExtractNuspecs">
    <ItemGroup>
      <ExtractNuspecPackages Include="$(PackagesDir)\**\EntityFramework*.nupkg" />
    </ItemGroup>
    <ExtractNuspecFromPackage NuGetPackageFilePath="%(ExtractNuspecPackages.Identity)" />
  </Target>
  
  <Target Name="RestoreLocalPackages">
    <!-- Loop over all local packages (which, on a nightly build, should include the localized ones
         but exclude the dated ones) exploding the packages -->
    <ItemGroup>
      <!-- Note: the construction of DatedLocalPackages assumes the date will be the
                 only part after "$(EF6NuGetPackageVersion)-" in the package name -->
      <DatedLocalPackages Include="$(LocalPackageSourceDir)\EntityFramework.$(EF6NuGetPackageVersion)-*.nupkg" />
      <DatedLocalPackages Include="$(LocalPackageSourceDir)\EntityFramework.*.$(EF6NuGetPackageVersion)-*.nupkg" />

      <!-- On a local build the symbols.nupkg files are in the same directory as the .nupkgs and must be excluded -->
      <LocalPackages Include="$(LocalPackageSourceDir)\EntityFramework*.nupkg"
                     Exclude="$(LocalPackageSourceDir)\EntityFramework*.symbols.nupkg;@(DatedLocalPackages)" />
    </ItemGroup>
    
    <!-- TODO: Remove Message tasks below - inserted for DEBUG only -->
    <Message Importance="High" Text="DEBUG: build_branch_name=$(build_branch_name)" />
    <Message Importance="High" Text="DEBUG: FrozenRuntimeBranch=$(FrozenRuntimeBranch)" />
    <Message Importance="High" Text="DEBUG: FrozenRuntimeDir=$(FrozenRuntimeDir)" />
    <Message Importance="High" Text="DEBUG: ShouldUseFrozenRuntime=$(ShouldUseFrozenRuntime)" />

    <Error Condition="'@(LocalPackages)' == ''" Text="LocalPackages is empty and must not be.  It should contain the list of non-dated, non-symbols EntityFramework .nupkg's from directory $(LocalPackageSourceDir)" />
    
    <!-- Restore the EF6 packages from $(LocalPackageSourceDir) -->
    <Message Importance="High"
             Text="RestoreLocalPackages: Using package input directory $(LocalPackageSourceDir)" />
    
    <!-- There is a bug in nuget (see issue 4113) such that if a .nupkg and a .symbols.nupkg for the same identity are side by side
         then nuget install will use the .symbols.nupkg despite the fact that it is missing some files (specifically "content/**/*" and "tools/**/*.ps1")
         We need those files in order to include them in the MSI. So here we copy just the .nupkg files to a parallel directory and then
         install from there -->
    <PropertyGroup>
      <CopiedNuGetPackagesDir>$(PackagesInputDir)\..\CopiedNuGetPackages</CopiedNuGetPackagesDir>
    </PropertyGroup>
    <RemoveDir Directories="$(CopiedNuGetPackagesDir)" />
    <MakeDir Directories="$(CopiedNuGetPackagesDir)" />
    <Copy SourceFiles="@(LocalPackages)" DestinationFolder="$(CopiedNuGetPackagesDir)" />
    
    <MSBuild Projects="$(RepositoryRoot).nuget\NuGet.targets" Targets="RestoreLocalPackage"
             Properties="$(BuildProperties);PackageRestoreOutputDir=$(PackageRestoreOutputDir);LocalPackageId=$([System.String]::Copy('%(LocalPackages.Filename)').Replace(&quot;.$(EF6NuGetPackageVersion)&quot;,&quot;&quot;));LocalPackageSource=$(CopiedNuGetPackagesDir);RequireNoCache=true;IncludePreRelease=true" />
             
  </Target>

  <Target Name="ReplaceEFToolsStrings">
    <RegexReplaceInFile InputFileName="Resources\EFToolsStrings.wxl.tokenized"
                        OutputFileName="Resources\EFToolsStrings.wxl"
                        Patterns="WIX_FULL_PRODUCT_NAME_DEV11;WIX_FULL_PRODUCT_NAME_DEV12;WIX_FULL_PRODUCT_NAME_DEV14;WIX_PRODUCT_DESCRIPTION_DEV11;WIX_PRODUCT_DESCRIPTION_DEV12;WIX_PRODUCT_DESCRIPTION_DEV14"
                        Replacements="$(WixFullProductName_Dev11);$(WixFullProductName_Dev12);$(WixFullProductName_Dev14);$(WixProductDescription_Dev11);$(WixProductDescription_Dev12);$(WixProductDescription_Dev14)" />
  </Target>
  <!--
  To modify your build process, add your task inside one of the targets below and uncomment it.
  Other similar extension points exist, see Wix.targets.
  -->
  <Target Name="BeforeBuild">
    <PropertyGroup>
      <!-- WixID must not contain hyphens -->
      <EF6NuGetPackageWixId>$(EF6NuGetPackageVersion.Replace('-', '_'))</EF6NuGetPackageWixId>
      <!-- WIX authoring inputs. This target ensures dependency properties has been resolved.  -->
      <DefineConstants>$(DefineConstants);AssemblyFileVersion=$(AssemblyFileVersion);BuildRevisionProductVersion=$(VersionBuild).$(VersionRevision)</DefineConstants>
      <DefineConstants>$(DefineConstants);AssemblyVersion=$(AssemblyVersion);AssemblyInfoVersion=$(AssemblyInfoVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);VisualStudioVersion=$(VisualStudioVersion);MajorVisualStudioVersion=$(VisualStudioVersion.Substring(0, 2))</DefineConstants>
      <DefineConstants>$(DefineConstants);EF6NuGetPackageVersion=$(EF6NuGetPackageVersion);EF6NuGetPackageWixId=$(EF6NuGetPackageWixId);EF5NuGetPackageVersion=$(EF5NuGetPackageVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);EmbedCab=$(EmbedCab);SolutionDir=$(SolutionDir);PackagesDir=$(PackagesDir);AssemblyPath45=$(AssemblyPath45)</DefineConstants>
      <DefineConstants>$(DefineConstants);SatelliteAssemblyPath=$(SatelliteAssemblyPath);LocOutputPath=$(LocOutputPath)</DefineConstants>
      <DefineConstants>$(DefineConstants);IncludeLocalizedArtifacts=$(IncludeLocalizedArtifacts)</DefineConstants>
      <DefineConstants Condition="'$(ShouldUseFrozenRuntime)' == 'True'">$(DefineConstants);FrozenRuntimeDir=$(FrozenRuntimeDir)</DefineConstants>
      <DefineConstants Condition="'$(ShouldUseFrozenRuntime)' != 'True'">$(DefineConstants);FrozenRuntimeDir=</DefineConstants>
    </PropertyGroup>
  </Target>
  <Target Name="AfterBuild">
    <!-- This is here so that we have the correct .PDBs for the last EFTools _installed_ (not just built) -->
    <ItemGroup>
      <EFDesignerSymbolFiles Include="$(OutputPath)Microsoft.Data.Entity.Design.BootstrapPackage.pdb" />
      <EFDesignerSymbolFiles Include="$(OutputPath)Microsoft.Data.Entity.Design.DatabaseGeneration.pdb" />
      <EFDesignerSymbolFiles Condition="$(VisualStudioVersion)=='11.0'" Include="$(OutputPath)Microsoft.Data.Entity.Design.DataSourceWizardExtension.pdb" />
      <EFDesignerSymbolFiles Include="$(OutputPath)Microsoft.Data.Entity.Design.EntityDesigner.pdb" />
      <EFDesignerSymbolFiles Include="$(OutputPath)Microsoft.Data.Entity.Design.Extensibility.pdb" />
      <EFDesignerSymbolFiles Include="$(OutputPath)Microsoft.Data.Entity.Design.Model.pdb" />
      <EFDesignerSymbolFiles Include="$(OutputPath)Microsoft.Data.Entity.Design.Package.pdb" />
      <EFDesignerSymbolFiles Include="$(OutputPath)Microsoft.Data.Entity.Design.pdb" />
      <EFDesignerSymbolFiles Include="$(OutputPath)Microsoft.Data.Entity.Design.VersioningFacade.pdb" />
      <EFDesignerSymbolFiles Include="$(OutputPath)Microsoft.Data.Tools.Design.XmlCore.pdb" />
      <EFDesignerSymbolFiles Include="$(OutputPath)Microsoft.VisualStudio.Data.Tools.Design.XmlCore.pdb" />
      <EFDesignerSymbolFiles Include="$(OutputPath)EntityFramework.pdb" />
    </ItemGroup>
    <Copy Condition="'$(Configuration)' == 'Debug'" SourceFiles="@(EFDesignerSymbolFiles)" DestinationFolder="$(OutputPath)\en\Symbols" />
  </Target>

  <Target Name="AfterClean">
    <!-- Remove the extra packages (and their expansions) created by RestorePackages and RestoreLocalPackages above -->
    <RemoveDir Directories="$(PackagesDir)" />
  </Target>
</Project>