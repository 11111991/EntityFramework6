<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="EFTools.version.settings"/>
  <Import Project="EFTools.common.tasks"/>  

  <PropertyGroup>
    <VsSDKDir Condition="$(VisualStudioVersion)=='12.0'">$(VSSDK120Install)</VsSDKDir>
    <VsSDKDir Condition="$(VisualStudioVersion)=='11.0'">$(VSSDK110Install)</VsSDKDir>
  </PropertyGroup>

  <PropertyGroup>
    <AssemblySearchPaths>
      $(VsSDKDir)VisualStudioIntegration\Common\Assemblies\v4.0\;
      $(VsSDKDir)VisualStudioIntegration\Common\Assemblies\v2.0\;
      $(DevEnvDir)ReferenceAssemblies\v4.5\;
      $(DevEnvDir)ReferenceAssemblies\v4.0\;
      $(DevEnvDir)ReferenceAssemblies\v2.0\;
      $(DevEnvDir)PublicAssemblies\;
      $(DevEnvDir);
      {CandidateAssemblyFiles};
      $(ReferencePath);
      {HintPathFromItem};
      {TargetFrameworkDirectory};
      {Registry:$(FrameworkRegistryBase),$(TargetFrameworkVersion),$(AssemblyFoldersSuffix)$(AssemblyFoldersExConditions)};
      {AssemblyFolders};
      {GAC};
      {RawFileName};
      $(OutDir);
    </AssemblySearchPaths>
  </PropertyGroup>

  <PropertyGroup>
    <CoreCompileDependsOn>
      GenerateAssemblyVersion;
      $(CoreCompileDependsOn)
    </CoreCompileDependsOn>
  </PropertyGroup>
  
  <PropertyGroup>
    <DefineConstants Condition="'$(Configuration)' == 'Release'">$(DefineConstants);INTERNALS_INVISIBLE</DefineConstants>
  </PropertyGroup>
  
  <Target Name="GenerateAssemblyVersion">
    <PropertyGroup>
      <AssemblyVersionFileName>$(TEMP)\$([System.Guid]::NewGuid()).cs</AssemblyVersionFileName>
    </PropertyGroup>
       
    <WriteLinesToFile 
      File="$(AssemblyVersionFileName)" 
      Overwrite="true"
      Lines="// &lt;auto-generated/&gt;
[assembly: System.Reflection.AssemblyVersion(&quot;$(AssemblyVersion)&quot;)]
[assembly: System.Reflection.AssemblyFileVersion(&quot;$(FullProductVersion)&quot;)]"  />
    
    <ItemGroup>
      <Compile Include="$(AssemblyVersionFileName)" />
    </ItemGroup>
  </Target>
  
  <Target Name="SafeGitClean">
    <PropertyGroup>
      <BackupDir Condition="'$(BackupDir)' == ''" >$(Temp)\SafeGitClean$([System.Guid]::NewGuid())</BackupDir>
      <DeleteBackupDir Condition="'$(DeleteBackupDir)' == ''">false</DeleteBackupDir>
      <TempFile>$(Temp)\SafeGitClean_UntrackedFiles$([System.Guid]::NewGuid())</TempFile>
    </PropertyGroup>
    
    <PropertyGroup>
      <BackupDir Condition="HasTrailingSlash('$(BackupDir)')">$(BackupDir.TrimEnd(@"\"))</BackupDir>
      <BackupFolderName>$([System.IO.Path]::GetFileName($(BackupDir)))</BackupFolderName>
    </PropertyGroup>
    
    <Message Text="Backup directory: $(BackupDir)" />

    <RemoveDir 
      Condition="'$(DeleteBackupDir)' == 'true' And Exists('$(BackupDir)')" 
      Directories="$(BackupDir)" />
    
    <Exec Command="git ls-files --other &gt; $(TempFile)" /> 

    <ReadLinesFromFile File="$(TempFile)">
      <Output TaskParameter="Lines" ItemName="UntrackedFile" />
    </ReadLinesFromFile>
        
    <ItemGroup>
      <UntrackedFileFixed Include="@(UntrackedFile->Replace('/', '\'))" />
    </ItemGroup>
    
    <Delete Files="$(TempFile)" TreatErrorsAsWarnings="true" />
      
    <Copy 
      SourceFiles="@(UntrackedFileFixed)" 
      DestinationFiles="@(UntrackedFileFixed->'$(BackupDir)\%(Identity)')" 
      OverwriteReadOnlyFiles="true" />
      
    <Exec Command="git clean -xfd -e $(BackupFolderName)" />      
  </Target>
  
</Project>